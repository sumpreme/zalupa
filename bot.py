# -*- coding: utf-8 -*-
import time
import requests
from bs4 import BeautifulSoup as bs
import pandas as pd
import telebot
from telebot import types
import pymysql
from threading import Thread

# ------------------ config ----------------------------
host = "31.31.196.38"
user = "u1721556_admin"
password = "Lapik2022."
bd_name = "u1721556_telegrambot"

token = '5884481081:AAEXlp06j9K6Rq0r_HkuX0PL89Hwac52MjI'
bot = telebot.TeleBot(token)
# -------------------------------------------------------

urlList = ['https://yaponomaniya.com/assorty', 'https://yaponomaniya.com/kombo', 'https://yaponomaniya.com/rolly/gorjachie_rolly', 'https://yaponomaniya.com/pitstsy']
productListMore = []*len(urlList)

def ThreadBot():
    productFocusId = 0
    productIndex = 0
    orderAddress = ''
    orderPhone = ''
    productsList = ''
    @bot.message_handler(commands=['start'])
    def start_message(message):
      photo = open('img1.jpg', 'rb')
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
      btn1 = types.KeyboardButton("üçïüçü–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üç∞üç£")
      btn2 = types.KeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞üõí")
      btn3 = types.KeyboardButton("‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùóÔ∏è")
      btn4 = types.KeyboardButton("‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è")
      markup.add(btn1, btn2, btn3, btn4)
      bot.send_message(message.chat.id,"<strong>üçïüç∞üç£–ü—Ä–∏–≤–µ—Çüç£üç∞üçï</strong>", reply_markup=markup, parse_mode='html')
      bot.send_message(message.chat.id,"<strong>üçï–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–æ–ª–ª—ã –≤ –ö–∏—Ä–æ–≤–µ?üçï</strong> \n –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å. –Ø–ø–æ–Ω–æ–º–∞–Ω–∏—è —É–≥–æ–¥–∏—Ç –≤–∫—É—Å—É –¥–∞–∂–µ —Å–∞–º–æ–≥–æ –≤–∑—ã—Å–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥—É—Ä–º–∞–Ω–∞.", parse_mode='html')
      bot.send_photo(message.chat.id, photo)
      try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user,
            password=password,
            database=bd_name,
        )
        try:
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT * FROM `users` WHERE `id` = '{message.chat.id}'")
                result1 = cursor.fetchall()
                if result1 == ():
                  with connection.cursor() as cursor:
                      cursor.execute("INSERT INTO `users` (`id`, `name`, `addres`, `phone`) VALUES (%s,%s,%s,%s)",
                                  (message.chat.id, message.from_user.first_name, '', ''))
                      connection.commit()
        finally:
            connection.close()
      except Exception as ex:
        print(ex)

    def CheckPhoneAddres(message):
        try:
          connection = pymysql.connect(
              host=host,
              port=3306,
              user=user,
              password=password,
              database=bd_name,
          )
          try:
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT * FROM `users` WHERE `id` = '{message.chat.id}'")
                phAd = cursor.fetchone()
                if phAd[3] == "":
                    sendPhone(message)
                else:
                    bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–µ–Ω–µ–Ω–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ø–æ –Ω–æ–º–µ—Ä—É: " + phAd[3], parse_mode='html')
                    DeleteCart(message)

          finally:
              connection.close()
        except Exception as ex:
            print(ex)

    def OpenCart(message):
        try:
          connection = pymysql.connect(
              host=host,
              port=3306,
              user=user,
              password=password,
              database=bd_name,
          )
          try:
            with connection.cursor() as cursor:
                cursor.execute(f"SELECT `id`, `productId`, `name`, `price`, `qty` FROM `cart` WHERE `userId` = '{message.chat.id}'")
                carts = cursor.fetchall()
                if carts == ():
                    bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
                    return
                msg = ""
                total = 0
                for cart in carts:
                    msg += f"{cart[2]} ({cart[3]}—Ä—É–±.) - {cart[4]}—à—Ç. - {cart[3] * cart[4]}—Ä—É–±.\n"
                    total += cart[3] * cart[4]
                global productsList
                productsList = msg
                msg += f"<b>–ò—Ç–æ–≥–æ: {total}—Ä—É–±.</b>"
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                markup.add(types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"), types.KeyboardButton("‚ùå–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É‚ùå"), types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"))
                bot.send_message(message.chat.id, msg, parse_mode="html", reply_markup=markup)
                bot.register_next_step_handler(message, OpenCartNextHandler)
          finally:
              connection.close()
        except Exception as ex:
            print(ex)

    def OpenCartNextHandler(message):
        if message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ":
            CheckPhoneAddres(message)
            #Back(message)
        elif message.text == "‚ùå–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É‚ùå":
            DeleteCart(message)
        elif message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö":
            Back(message)

    def OrderAddCart(message, adress, phone, productsList):
        print("–¥–∞–≤–∞–π –∑–∞–∫–∞–∂–µ–º —É–∂–µ")
        print(adress, phone, productsList)

    def DeleteCart(message):
        try:
          connection = pymysql.connect(
              host=host,
              port=3306,
              user=user,
              password=password,
              database=bd_name,
          )
          try:
            with connection.cursor() as cursor:
                cursor.execute(f"DELETE FROM `cart` WHERE `userId` = '{message.chat.id}'")
                connection.commit()
                bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
                Back(message)
          finally:
              connection.close()
        except Exception as ex:
            print(ex)
    def OrderSend(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üç£–°–µ—Ç—ãüç£")
        btn2 = types.KeyboardButton("üçïüçü–ö–æ–º–±–æüçïüçü")
        btn3 = types.KeyboardButton("ü•¢–†–æ–ª–ª—ãü•¢")
        btn4 = types.KeyboardButton("üçï–ü–∏—Ü—Ü–∞üçï")
        btn5 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup, parse_mode='html')
        bot.register_next_step_handler(message, OrderSendHandler)
    def InputProduct(message, id, productListMore):
        global productFocusId, productIndex
        if productIndex >= len(productListMore):
            productIndex = 0
        index = productIndex
        productFocusId = productListMore[id][index][0]
        bot.send_photo(message.chat.id, photo=productListMore[id][index][3])
        bot.send_message(message.chat.id, text=f"<em>"+productListMore[id][index][1]+"</em>\n<strong>"+productListMore[id][index][2] + "—Ä</strong>", parse_mode='html')
    def sendPhone(message):
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)
        back = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        keyboard.add(button_phone, back)
        bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω", reply_markup=keyboard, parse_mode='html')
    def Sets(message):
        global productListMore
        markupSets = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üç£–ï—â—ëüç£")
        btn2 = types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
        btn3 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markupSets.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–°–µ—Ç—ã", reply_markup=markupSets)
        InputProduct(message, 0, productListMore)
        bot.register_next_step_handler(message, SetsHandler)
    def Combo(message):
        global productListMore
        markupCombo = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üçïüçü–ï—â—ëüçïüçü")
        btn2 = types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
        btn3 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markupCombo.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–ö–æ–º–±–æ", reply_markup=markupCombo)
        InputProduct(message, 1, productListMore)
        bot.register_next_step_handler(message, ComboHandler)
    def Rolls(message):
        global productListMore
        markupRolls = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("ü•¢–ï—â—ëü•¢")
        btn2 = types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
        btn3 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markupRolls.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–†–æ–ª–ª—ã", reply_markup=markupRolls)
        InputProduct(message, 2, productListMore)
        bot.register_next_step_handler(message, RollsHandler)
    def Pizza(message):
        global productListMore
        markupPizza = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üçï–ï—â—ëüçï")
        btn2 = types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
        btn3 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markupPizza.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, "–ü–∏—Ü—Ü–∞", reply_markup=markupPizza)
        InputProduct(message, 3, productListMore)
        bot.register_next_step_handler(message, PizzaHandler)
    def Order(message, index, number):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ùå–û—Ç–º–µ–Ω–∞‚ùå"))
        markup.add(types.KeyboardButton("-"), types.KeyboardButton(str(number)), types.KeyboardButton("+"))
        markup.add(types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"))
        bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {number}—à—Ç.", reply_markup=markup)
        bot.register_next_step_handler(message, lambda m: OrderNextHandler(m, index, number))
    def OrderNextHandler(message, index, number):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        buttonList = ["üç£–ï—â—ëüç£", "üçïüçü–ï—â—ëüçïüçü", "ü•¢–ï—â—ëü•¢", "üçï–ï—â—ëüçï"]
        textList = ["üç£–°–µ—Ç—ãüç£", "üçïüçü–ö–æ–º–±–æüçïüçü", "ü•¢–†–æ–ª–ª—ãü•¢", "üçï–ü–∏—Ü—Ü–∞üçï"]
        nextHandlerList = [SetsHandler, ComboHandler, RollsHandler, PizzaHandler]
        btn2 = types.KeyboardButton("‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ")
        btn3 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
        markup.add(buttonList[index], btn2, btn3)
        if message.text == "‚ùå–û—Ç–º–µ–Ω–∞‚ùå":
            bot.send_message(message.chat.id, textList[index], reply_markup=markup)
            bot.register_next_step_handler(message, nextHandlerList[index])
            InputProduct(message, index, productListMore)
        elif message.text == "-":
            if number != 1:
                number -= 1
            Order(message, index, number)
        elif message.text == "+":
            number += 1
            Order(message, index, number)
        elif message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ":
            OrderAdd(message, index, number)
            bot.send_message(message.chat.id, textList[index], reply_markup=markup)
            bot.register_next_step_handler(message, nextHandlerList[index])
        else:
            bot.register_next_step_handler(message, OrderNextHandler)
    def OrderAdd(message, index, qty):
        try:
          connection = pymysql.connect(
              host=host,
              port=3306,
              user=user,
              password=password,
              database=bd_name,
          )
          try:
            with connection.cursor() as cursor:
                productList = productListMore[index][productIndex]
                cursor.execute("INSERT INTO `cart` (`userId`, `productId`, `name`, `price`, `qty`) VALUES (%s,%s,%s,%s,%s)",
                            (message.chat.id, productList[0], productList[1], int(productList[2]), qty))
                connection.commit()
                bot.send_message(message.chat.id, f"–í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: <b>{productList[1]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {qty}—à—Ç. –Ω–∞ —Å—É–º–º—É {int(productList[2]) * qty}—Ä—É–±.</b>", parse_mode="html")
          finally:
              connection.close()
        except Exception as ex:
            print(ex)
    def Back(message):
        photo = open('img1.jpg', 'rb')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton("üçïüçü–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üç∞üç£")
        btn2 = types.KeyboardButton("üõí–ö–æ—Ä–∑–∏–Ω–∞üõí")
        btn3 = types.KeyboardButton("‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùóÔ∏è")
        btn4 = types.KeyboardButton("‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è")
        markup.add(btn1, btn2, btn3, btn4)

        bot.send_photo(message.chat.id, photo, caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    @bot.message_handler(content_types=['text'])
    def func(message):
        def InfoSend():
            photo2 = open('img2.webp', 'rb')
            bot.send_message(message.chat.id, text="<em><strong>üçï–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–æ–ª–ª—ã –≤ –ö–∏—Ä–æ–≤–µ?üçï</strong> \n –¢–æ–≥–¥–∞ –≤—ã —Ç–æ—á–Ω–æ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –Ω–µ–ø—Ä–æ—Å—Ç—ã–º –≤—ã–±–æ—Ä–æ–º –∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ? –ú—ã –≤–∞–º –ø–æ–º–æ–∂–µ–º! \n <strong>1.</strong>–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å. –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã (–ö–∏—Ä–æ–≤) –¥–æ–ª–∂–Ω–∞ —É–¥–∏–≤–∏—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º —Ä–æ–ª–ª–æ–≤ –∏ –ø–∏—Ü—Ü—ã. –Ø–ø–æ–Ω–æ–º–∞–Ω–∏—è —É–≥–æ–¥–∏—Ç –≤–∫—É—Å—É –¥–∞–∂–µ —Å–∞–º–æ–≥–æ –≤–∑—ã—Å–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≥—É—Ä–º–∞–Ω–∞. \n <strong>2.</strong>–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞. –ó–∞–∫–∞–∑—ã–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫—É —Ä–æ–ª–ª–æ–≤ –∏ –ø–∏—Ü—Ü—ã –≤ –ö–∏—Ä–æ–≤–µ, —Ö–æ—á–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–¥—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. –ù–∞—à–∏ –∫—É—Ä—å–µ—Ä—ã –≤–æ–≤—Ä–µ–º—è –∏ –±–µ—Ä–µ–∂–Ω–æ –ø—Ä–∏–≤–µ–∑—É—Ç –≤–∞—à –∑–∞–∫–∞–∑ –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –≥–æ—Ä–æ–¥–∞. \n <strong>3.</strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–≤–∞—Ä–∞. –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –µ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫—É—Å–Ω–æ–π. –í –Ø–ø–æ–Ω–æ–º–∞–Ω–∏–∏ –¥–ª—è –≤–∞—Å –≥–æ—Ç–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞.</em>", parse_mode='html')
            bot.send_message(message.chat.id, text="<em><strong>–†–æ–ª–ª—ã –ö–∏—Ä–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —ç—Ç–æ –Ø–ø–æ–Ω–æ–º–∞–Ω–∏—è! –ü–æ—Ä–∞–¥—É–π—Ç–µ —Å–µ–±—è –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</strong></em>", parse_mode='html')
        def ContactsSend():
            #photo3 = open('/Users/user/Desktop/—Ö–∞–∫–∞—Ç–æ–Ω/logo2.png', 'rb')
            #bot.send_photo(message.chat.id, photo3)
            bot.send_message(message.chat.id, text=f"<em><strong>üçï–ö–æ–Ω—Ç–∞–∫—Ç—ãüçï</strong>\nüç£–≥. –ö–∏—Ä–æ–≤, —É–ª. –°–ø–∞—Å—Å–∫–∞—è, 17 / –õ–µ–Ω–∏–Ω–∞, 82\nüç£–≥. –ö–∏—Ä–æ–≤, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 185–∞\nüç£–≥. –ö–∏—Ä–æ–≤, –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π –ø—Ä-—Ç, 19\nüç£–≥. –ö–∏—Ä–æ–≤, –ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∞—è –ø–ª.1–ë (–¢–¶ –ö–ª—ë–Ω, –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ)\nüç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª.–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω–∞—è, 5\nüç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª. –í–æ–ª–æ–¥–∞—Ä—Å–∫–æ–≥–æ, 9\nüç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, –ø—Ä-—Ç –†–æ—Å—Å–∏–∏, 34 (–¢–¶ ""–†–æ—Å—Å–∏—è"", 2 —ç—Ç–∞–∂)\nüç£<strong>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (8332) 735-166</strong>\nüç£<strong>–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤: 10:00 ‚Äî 23:00</strong></em>",parse_mode='html')
            bot.send_venue(message.chat.id, latitude = 58.60250752290142, longitude = 49.681341311816595, address="–≥. –ö–∏—Ä–æ–≤, —É–ª. –°–ø–∞—Å—Å–∫–∞—è, 17 / –õ–µ–Ω–∏–Ω–∞, 82", title="üç£–≥. –ö–∏—Ä–æ–≤, —É–ª. –°–ø–∞—Å—Å–∫–∞—è, 17 / –õ–µ–Ω–∏–Ω–∞, 82")
            bot.send_venue(message.chat.id, latitude = 58.60320882122029, longitude = 49.59145272715841, address="–≥. –ö–∏—Ä–æ–≤, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 185–∞", title="üç£–≥. –ö–∏—Ä–æ–≤, —É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 185–∞")
            bot.send_venue(message.chat.id, latitude = 58.63737481025416, longitude = 49.62389591366625, address="–≥. –ö–∏—Ä–æ–≤, –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π –ø—Ä-—Ç, 19", title="üç£–≥. –ö–∏—Ä–æ–≤, –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π –ø—Ä-—Ç, 19")
            bot.send_venue(message.chat.id, latitude = 58.644245195202636, longitude = 49.722704327160265, address="–≥. –ö–∏—Ä–æ–≤, –ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∞—è –ø–ª.1–ë (–¢–¶ –ö–ª—ë–Ω, –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ)", title="üç£–≥. –ö–∏—Ä–æ–≤, –ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∞—è –ø–ª.1–ë (–¢–¶ –ö–ª—ë–Ω, –ª–µ–≤–æ–µ –∫—Ä—ã–ª–æ)")
            bot.send_venue(message.chat.id, latitude = 58.54348646660314, longitude = 50.05261375599123, address="–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª.–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω–∞—è, 5", title="üç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª.–§–µ—Å—Ç–∏–≤–∞–ª—å–Ω–∞—è, 5")
            bot.send_venue(message.chat.id, latitude = 58.531380191736666, longitude = 50.03653399831977, address="–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª. –í–æ–ª–æ–¥–∞—Ä—Å–∫–æ–≥–æ, 9", title="üç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, —É–ª. –í–æ–ª–æ–¥–∞—Ä—Å–∫–æ–≥–æ, 9")
            bot.send_venue(message.chat.id, latitude = 58.544120772700374, longitude = 50.044049936396846, address="–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, –ø—Ä-—Ç –†–æ—Å—Å–∏–∏, 34 (–¢–¶ –†–æ—Å—Å–∏—è, 2 —ç—Ç–∞–∂)", title="üç£–≥. –ö–∏—Ä–æ–≤–æ-–ß–µ–ø–µ—Ü–∫, –ø—Ä-—Ç –†–æ—Å—Å–∏–∏, 34 (–¢–¶ –†–æ—Å—Å–∏—è, 2 —ç—Ç–∞–∂)")

        if(message.text == "üçïüçü–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üç∞üç£"):
            OrderSend(message)
        elif(message.text == "‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùóÔ∏è"):
            InfoSend()
        elif(message.text == "‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è"):
            ContactsSend()
        elif (message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞üõí"):
            OpenCart(message)

        elif(message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            Back(message)
    def OrderSendHandler(message):
        global productIndex
        if message.text == "üç£–°–µ—Ç—ãüç£":
            productIndex = 0
            Sets(message)
        elif (message.text == "üçïüçü–ö–æ–º–±–æüçïüçü"):
            productIndex = 0
            Combo(message)
        elif (message.text == "ü•¢–†–æ–ª–ª—ãü•¢"):
            productIndex = 0
            Rolls(message)
        elif (message.text == "üçï–ü–∏—Ü—Ü–∞üçï"):
            productIndex = 0
            Pizza(message)
        elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            Back(message)
    def SetsHandler(message):
        global productIndex
        if (message.text == "üç£–ï—â—ëüç£"):
            productIndex += 1
            InputProduct(message, 0, productListMore)
            bot.register_next_step_handler(message, SetsHandler)
        elif (message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"):
            Order(message, 0, 1)
        elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            OrderSend(message)
    def ComboHandler(message):
        global productIndex
        if(message.text == "üçïüçü–ï—â—ëüçïüçü"):
            productIndex += 1
            InputProduct(message, 1, productListMore)
            bot.register_next_step_handler(message, ComboHandler)
        elif (message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"):
            Order(message, 1, 1)
        elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            OrderSend(message)
    def RollsHandler(message):
        global productIndex
        if (message.text == "ü•¢–ï—â—ëü•¢"):
            productIndex += 1
            InputProduct(message, 2, productListMore)
            bot.register_next_step_handler(message, RollsHandler)
        elif (message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"):
            Order(message, 2, 1)
        elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            OrderSend(message)
    def PizzaHandler(message):
        global productIndex
        if (message.text == "üçï–ï—â—ëüçï"):
            productIndex += 1
            InputProduct(message, 3, productListMore)
            bot.register_next_step_handler(message, PizzaHandler)
        elif (message.text == "‚úÖ–ó–∞–∫–∞–∑–∞—Ç—å‚úÖ"):
            Order(message, 3, 1)
        elif (message.text == "‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"):
            OrderSend(message)


    bot.polling(none_stop=True)

def ThreadParser():
    def ParserProducts(catalogID, urlList):
        productId = 0
        productCatalogId = 0
        productsList = []
        productCatalogId = catalogID
        r = requests.get(urlList[catalogID])
        soup = bs(r.text, "html.parser")
        productsItems = soup.find_all('li', class_='product-item')
        for productItem in productsItems:
            productList = []
            productId = productItem['id'].replace('dish-', '')
            productList.append(productId)
            priductTitel = productItem.find_all('div', class_='product-title')
            for titel in priductTitel:
                productList.append(titel.div.text)
                priductPrice = productItem.find_all('div', class_='price-text-wrap')
                for price in priductPrice:
                    cleanPrice = price.span.text.replace(' ‚ÇΩ', '')
                    productList.append(cleanPrice.replace('\xa0', ' '))
                    priductImage = productItem.find_all('img', class_='product-img')
                    for image in priductImage:
                        productList.append("https://yaponomaniya.com" + image['src'])
                        productList.append(productCatalogId)
            productsList.append(productList)
        return productsList
    while True:
        global productListMore, urlList

        productListMoreDuble = []
        for i in range(len(urlList)):
            productListMoreDuble.append(ParserProducts(i, urlList))

        productListMore = productListMoreDuble.copy()
        time.sleep(30)
@bot.message_handler(content_types=['contact']) 
def contact(message):
    if message.contact is not None: 
        try:
          connection = pymysql.connect(
              host=host,
              port=3306,
              user=user,
              password=password,
              database=bd_name,
          )
          try:
            with connection.cursor() as cursor:
                cursor.execute("UPDATE `users` SET `phone` = %s WHERE `id` = %s",
                 (message.contact.phone_number, message.chat.id)),
                connection.commit()
                bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω") 
                bot.send_message(message.chat.id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–µ–Ω–µ–Ω–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ø–æ –Ω–æ–º–µ—Ä—É: " + phAd[3], parse_mode='html')
                DeleteCart(message)
          finally:
              connection.close()
        except Exception as ex:
            print(ex)
    
threadPars = Thread(target=ThreadParser).start()
threadBot = Thread(target=ThreadBot).start()